@page "/imageResizer"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats
@using BlazorDownloadFile
@using WebDevTools.Common.Models
@using System.IO
@using System.Runtime.Serialization.Formatters.Binary
@inject IAnalytics Analytics
@inject IBlazorDownloadFileService BlazorDownloadFileService
@inject HttpClient Http

@using Microsoft.AspNetCore.Components.Web.Extensions.Head
<Meta Property="description" Content="Fundamental tooling for day to day web dev tasks - Image resizer" />
<Meta Property="keywords" Content="image, resize, resizer, image resizer, resize image" />
<Title Value="WebDevTool.eu - Image resizer"></Title>

<div class="content-container-div">
    <h1>Image resizer</h1>
    Resizing by percentage <input id="iResizingPercentage" value="50" @onchange="iResizingPercentage_onchange" type="number" min="1" max="300" />%<br /><br />
    Input image (max size: @(maxFileSize/1024/1024) MB)
    <InputFile OnChange="@UploadFile" /> <br />
    @if (isUploading)
    {
        <p><b>Working on your picture! Please wait!</b></p>
        <img src="loading.gif" />
    }
    <br />
    <br />

    @if (!isUploading && img != null)
    {
        <h2>Result</h2>
        <p>
            <label>Original width: </label> <label>@originalWidth</label> <label>px</label><br />
            <label>Original height: </label> <label>@originalHeight</label> <label>px</label><br />
            <label>New width: </label> <label>@newWidth</label> <label>px</label><br />
            <label>New height: </label> <label>@newHeight</label> <label>px</label><br />
        </p>
        <button class="btn btn-primary" @onclick="DownloadFile_onclick">Download result</button>
    }

    <p><b><labe class=" w-100">@errorMessage</labe></b></p><br />
</div>

@code {
    private string errorMessage;
    private bool isUploading = false;
    private int maxFileSize = 1024 * 1024 * 10;
    private double resizingAmount = 50;
    private Image img = null;
    private IBrowserFile file;
    private IImageFormat format;
    private string mimeType = string.Empty;
    private string ext = string.Empty;
    private string fileName = string.Empty;
    private int originalWidth = 0;
    private int originalHeight = 0;
    private int newWidth = 0;
    private int newHeight = 0;


    async Task UploadFile(InputFileChangeEventArgs e)
    {
        isUploading = true;
        errorMessage = string.Empty;

        try
        {
            file = e.GetMultipleFiles(1).FirstOrDefault();
            ext = System.IO.Path.GetExtension(file.Name);
            mimeType = file.ContentType;
            fileName = file.Name;

            using var stream = file.OpenReadStream(maxFileSize);
            (img, format) = await Image.LoadWithFormatAsync(stream);
            originalWidth = img.Width;
            originalHeight = img.Height;
            calculateNewSizes(resizingAmount);
        }
        catch (Exception ex)
        {
            errorMessage = "Couldn't receive the image! ";
            errorMessage += ex.Message;
        }

        isUploading = false;
    }

    async Task DownloadFile_onclick()
    {
        isUploading = true;
        errorMessage = string.Empty;

        try
        {
            MemoryStream m = new MemoryStream();
            await file.OpenReadStream(maxFileSize).CopyToAsync(m);

            var content = new MultipartFormDataContent {
                { new ByteArrayContent(m.GetBuffer()), "\"FormFile\"", file.Name },
                { new StringContent(newWidth.ToString()), "\"NewWidth\"" },
                { new StringContent(newHeight.ToString()), "\"NewHeight\"" }
            };

            var imageResizeResponse = await Http.PostAsync("image/resize", content);
            var imageByteArray = await imageResizeResponse.Content.ReadAsByteArrayAsync();
            await BlazorDownloadFileService.DownloadFile(fileName, imageByteArray, mimeType);

            await Analytics.TrackEvent("ImageResizer", file?.Size.ToString());
        }
        catch (Exception ex)
        {

            errorMessage = "Couldn't download the image! ";
            errorMessage += ex.Message;
        }


        isUploading = false;
    }

    void iResizingPercentage_onchange(ChangeEventArgs args)
    {
        resizingAmount = Convert.ToDouble(args.Value);
        calculateNewSizes(resizingAmount);
    }

    void calculateNewSizes(double percentage)
    {
        if (img != null)
        {
            double resizingPercentage = percentage / 100;
            newWidth = Convert.ToInt32((double)img.Width * resizingPercentage);
            newHeight = Convert.ToInt32((double)img.Height * resizingPercentage);
        }
    }
}
